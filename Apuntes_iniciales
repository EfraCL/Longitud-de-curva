# ¿Qué queremos programar?

Una función capaz de calcular la longitud de curva; un parámetro útil para conocer la variabilidad de una variable a lo largo de una serie temporal. Este parámetro está basado en el [GVI y PGS](https://bionicwookiee.com/2020/02/26/cgm-metrics-gvi-pgs/) que miden aplicaciones como diabox, para la gestión de la diabetes.

## ¿Qué argumentos debe tomar la función?

- La función debe tomar los siguientes argumentos:
    - Dos argumentos con: i) la **variable de interés** y ii) otro con la **variable con información del momento de las mediciones** (fecha o numérico entero). Por tanto, deben ser **dos argumentos**, el primero un **vector de tipo numérico (entero o flotante)** y el segundo un **vector de tipo fecha o numérico entero**.
    - Si las mediciones se toman de forma regular en el tiempo, se necesitará un argumento donde se indique el **tiempo entre observaciones**. Por tanto, sería interesante indicar si el tiempo entre mediciones es el mismo o puede variar. En el primer caso tendremos que incluir una sentencia, para controlar que el tiempo entre mediciones. Sin embargo, si las observaciones se realizan sin una frecuencia establecida, entonces no hará falta un mecanismo de control. Se debe tratar, por tanto, de un **argumento numérico de tipo entero**.
    - Un argumento que permita calcular la longitud de curva para **incluir o no en el cálculo** los **segmentos que unan mediciones no correlativas**. Cuando las mediciones se realizan de forma regular, es común que haya algún dato ausente. Esto significa que a la hora de calcular la longitud de la curva, se tendrán en cuenta segmentos que unan **fechas que no son correlativas**. Por ejemplo, si tenemos tres fechas (1, 2 y 3) y no tenemos datos en la fecha 2, el segmento unirá directamente la fecha 1 con la 3. Se debe tratar, por tanto, de un **argumento de tipo lógico**.
    - Deberá incluir también un argumento que permita indicar si queremos dividir el valor de longitud de curva por la longitud del segmento desde el primer valor y el último de la serie temporal. Se debe tratar, por tanto, de un **argumento de tipo lógico**.
    - Un argumento donde se especifique si es necesario transformar la variable de la columna tiempo en formato fecha o ya está en este formato. Este **argumento** será, por tanto, **de tipo lógico**.
    - Un argumento donde se especifique el formato en el que se indica la fecha. Deberá ser, por tanto, un **argumento de tipo carácter**.
    - Dado que la longitud de curva es sensible a las unidades en las que se mida el tiempo (horas, minutos, segundos, días, etc.), es importante incluir un argumento donde se especifique en qué unidades se debe medir la diferencia entre fechas. Por tanto, se deberá incluir un **argumento de tipo carácter**.

Entonces, los argumentos de la función quedarían tal que así:

```
long.curve <- function(col.variable, 
                col.time,
                convert.toDate = FALSE,
                format.date,
                time.measure,
                units.time,
                include.all = FALSE, 
                cal.GVI = FALSE)
```

## Fases

1- Comprobar que la variable del tiempo está o no en formato fecha, según el valor especificado al argumento *convert.toDate* (por defecto, FALSE). Si el argumento es FALSE, se pasará al siguiente proceso. En caso contrario (*convert.toDate = TRUE*), se realizará la conversión de acuerdo al formato que se especifica en el argumento *format.date*.

2- Ordenar los datos de más antiguo a más reciente.

3- Antes de calcular la longitud debemos tener en cuenta si el argumento *include.all* es TRUE o FALSE (por defecto, FALSE). Si *include.all = F*, entonces se comprobará primero si la diferencia entre la observación i y la observación i + 1 se corresponde con la especificada en el argumento *time.measure*. Por otro lado, si *include.all = T*, no será necesario hacer la comprobación anterior.

4- Ahora calcularemos longitud de cada segmento y se almacenará en un vector cualquiera. Posteriormente, se sumarán todos los elementos del vector y se almacenará en otro vector.

5- Comprobar si se va a calcular el GVI o no, según el valor especificado en el argumento *cal.GVI* (por defecto, FALSE). Si el argumento especificado es FALSE, simplemente se imprimirá el valor de longitud de curva. En cambio, *si cal.GVI = T* se calculará la longitud del segmento entre la última fecha y la primera, y el resultado se dividirá por el valor de longitud de curva calculado. Posteriormente, se imprimirá el valor de GVI.


## Comprobación de operaciones 

1- Restar fechas en los diferentes formatos, para ver el resultado.
	- con vectores de clase "Date" (incluyendo la función *dmy()* del paquete *lubridate*), "POSIXct" y "POSIXlt". Si restamos fechas, nos aparece el mensaje "Time difference of X days".
	
		```
		formatoFecha <- "%d/%m/%Y"
		fecha1 <- as.Date("24/12/2024", format = formatoFecha)
		fecha2 <- as.Date("28/12/2024", format = formatoFecha)
		fecha2 - fecha1 # Time difference of 4 days
		
		fecha1POSIXct <- as.POSIXct(fecha1)
		fecha2POSIXct <- as.POSIXct(fecha2)
		fecha2POSIXct - fecha1POSIXct # Time difference of 4 days
		
		fecha1POSIXlt <- as.POSIXlt(fecha1)
		fecha2POSIXlt <- as.POSIXlt(fecha2)
		fecha2POSIXlt - fecha1POSIXlt # Time difference of 4 days
		
		fecha1Lubridate <- lubridate::dmy("24/12/2024")
		fecha2Lubridate <- lubridate::dmy("28/12/2024")
		fecha1Lubridate - fecha2Lubridate # Time difference of 4 days
		
		```
	Por tanto, cuando se calcule la diferencia entre fechas, es importante utilizar la función *as.numeric()*, para que nos 		devuelva un número, en vez de un texto.

2- Restar fechas con precisión horaria, minutal y de segundos. Creo que lo más sensato va a ser trabajar con el paquete *lubridate* y su función *as_Datetime*. La razón es sencilla: si le pasamos una fecha donde sólo se indique dia, mes y año, no hay problema. Además, incluye el argumento *format*, para especificarle el formato de fecha que le estamos metiendo.

		```
		lubridate::dmy_hms("24/12/2024 12:05:37") -> a
		lubridate::dmy_hms("26/12/2024 18:05:37") -> b
		
		b - a # Time difference of 2.25 days
		as.numeric(b - a) # 2.25
		
		lubridate::as_datetime("26/12/2024 18:05:00", format = "%d/%m/%Y %H:%M:%S") -> a
		lubridate::as_datetime("26/12/2024 18:10:00", format = "%d/%m/%Y %H:%M:%S") -> b
		b - a # Time difference of 5 mins
		as.numeric(b - a) # 5
		
		lubridate::as_datetime("26/12/2024 18:10:00", format = "%d/%m/%Y %H:%M:%S") -> b
		lubridate::as_datetime("26/12/2024 17:10:00", format = "%d/%m/%Y %H:%M:%S") -> a
		b - a # Time difference of 1 hours
		as.numeric(b - a) # 1
		```
