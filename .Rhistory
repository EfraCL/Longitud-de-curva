fecha2Lubridate <- dmy("28/12/2024")
fecha2Lubridate - fecha1Lubridate
class(fecha1Lubridate)
as.numeric(fecha2Lubridate - fecha1Lubridate)
fecha1 <- as.Date("24/12/2024 12:00:25", format = "%d/%m/%Y %h:%m:%s")
fecha1
?as.Date
fecha1 <- as.Date("24/12/2024 12:00:25", format = "%d/%m/%Y %H:%M:%S")
fecha1
as.POSIXct(fecha1)
as.POSIXlt(fecha1)
as.POSIXlt(fecha1) -> a
a
a
as.POSI
as.POSIXct()
?as.POSIXct()
as.POSIXct("24/12/2024 12:05:37")
as.POSIXct("24/12/2024 12:05:37", tz = "GMT")
as.POSIXct("24/12/2024 12:05:37", tz = "GMT") -> a
a
as.numeric(a)
as.POSIXct("24/12/2024 12:05:37", tz = "GMT", format = "%d/%m/%Y %H:%M:%S") -> a
as.numeric(a)
a
lubridate::dmy_hms("24/12/2024 12:05:37)
)
lubridate::dmy_hms("24/12/2024 12:05:37")
lubridate::dmy_hms("24/12/2024 12:05:37") -> a
class(a)
a
lubridate::dmy_hms("26/12/2024 18:05:37") -> b
b - a
as.numeric(b - a)
lubridate::as_date("26/12/2024 18:05:37", format = format = "%d/%m/%Y %H:%M:%S")
lubridate::as_date("26/12/2024 18:05:37", format = "%d/%m/%Y %H:%M:%S")
lubridate::as_datetime("26/12/2024 18:05:37", format = "%d/%m/%Y %H:%M:%S")
lubridate::as_datetime("26/12/2024", format = "%d/%m/%Y %H:%M:%S")
lubridate::as_datetime("26/12/2024", format = "%d/%m/%Y")
lubridate::as_datetime("26/12/2024 18:05:00", format = "%d/%m/%Y %H:%M:%S") -> a
lubridate::as_datetime("26/12/2024 18:10:00", format = "%d/%m/%Y %H:%M:%S") -> b
b - a
as.integer(b - a)
lubridate::as_datetime("26/12/2024 18:10:00", format = "%d/%m/%Y %H:%M:%S") -> b
lubridate::as_datetime("26/12/2024 17:10:00", format = "%d/%m/%Y %H:%M:%S") -> a
b - a
rm(list = ls())
col.variable <- c(4.5, 5.5, 8.5, 2.5, 1.5, 0.5, 0, 10.5, 9.5)
col.time <- c("07/12/2024 05:00:00", "07/12/2024 04:00:00", "07/12/2024 03:00:00",
"07/12/2024 02:00:00", "07/12/2024 01:00:00", "07/12/2024 06:00:00",
"07/12/2024 07:00:00", "07/12/2024 08:00:00", "07/12/2024 09:00:00")
convert.toDate <- TRUE
format.date <- "%d/%m/%Y %H:%M:%S"
time.measure <- 1
include.all <- FALSE
cal.GVI <- FALSE
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
col.time
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- sort(col.time, index.return = T) # Ordenamos la variable tiempo y lo almacenamos en una lista junto con los índices de posición
col.time <- indices$x # Actualizamos la variable tiempo
col.variable <- col.variable[indices$ix] # Ordenamos también la variable de interés, para que mantener el dataset inicial
}
col.time
is.unsorted(col.time)
indices <- sort(col.time, index.return = T)
indices
indices$x
sort(col.time, index.return = T)
?sort
sort(col.time, index.return = T)$x
indices <- sort(col.time, index.return = T)
class(indices)
order(col.time)
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
}
col.time
col.variable
rm(indices)
col.variable <- c(4.5, 5.5, 8.5, 2.5, 1.5, 0.5, 0, 10.5, 9.5)
col.time <- c("07/12/2024 05:00:00", "07/12/2024 04:00:00", "07/12/2024 03:00:00",
"07/12/2024 02:00:00", "07/12/2024 01:00:00", "07/12/2024 06:00:00",
"07/12/2024 07:00:00", "07/12/2024 08:00:00", "07/12/2024 09:00:00")
convert.toDate <- TRUE
format.date <- "%d/%m/%Y %H:%M:%S"
time.measure <- 1
include.all <- FALSE
cal.GVI <- FALSE
values <- c()
for(i in 1:(length(col.variable) - 1)){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + i] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
for(i in seq(1, length(col.variable)-1, 1)){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + i] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
col.variable[i + 1]
col.time[i + i] - col.time[i]
for(i in seq(1, length(col.variable) - 1, 1)){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
col.time[i + 1] - col.time[i]
col.time[i + 1]
col.time[i]
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
rm(indices)
}
values <- c()
for(i in seq(1, length(col.variable) - 1, 1)){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
col.time[i + 1] - col.time[i]
longitudCurva
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
longitudCurva
?seq_along
values <- c()
indexs <- seq_along(1, length(col.variable) - 1, 1)
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
longitudCurva
col.variable <- c(4.5, 5.5, 8.5, 2.5, 1.5, 0.5, 0, 10.5, 9.5, 15.5)
col.time <- c("07/12/2024 05:00:00", "07/12/2024 04:00:00", "07/12/2024 03:00:00",
"07/12/2024 02:00:00", "07/12/2024 01:00:00", "07/12/2024 06:00:00",
"07/12/2024 07:00:00", "07/12/2024 08:00:00", "07/12/2024 09:00:00",
"07/12/2024 11:00:00")
convert.toDate <- TRUE
format.date <- "%d/%m/%Y %H:%M:%S"
time.measure <- 1
include.all <- FALSE
cal.GVI <- FALSE
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
rm(indices)
}
col.time
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
longley
longitudCurva
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
col.variable
15.5 - 1.5
dif.time <- is.numeric(col.time[length(col.time)] - col.time[1])
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
value
print(longitudCurva/value)
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + i] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
time.measure == dif.time
dif.time
for(i in indexs){
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
for(i in indexs){
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[i + 1] - col.variable[i]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- is.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[i + 1] - col.variable[i]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
## Calculo de GVI
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
getwd()
getwd()
ls()
rm(list = ls())
list.files()
x <- read.csv("datos_prueba/temp_soil.csv")
x <- read.csv("datos_prueba/temp_soil.csv", header = T, sep = ";", dec = ",",
colClasses = c("character", "numeric", "numeric", "numeric"))
x <- gather(x, key = "depth_level", value = "temp", 2:4)
library(tidyr)
library(dplyr)
x <- gather(x, key = "depth_level", value = "temp", 2:4)
View(x)
long.curve <- function(col.variable,
col.time,
convert.toDate = FALSE,
format.date,
time.measure,
include.all = FALSE,
cal.GVI = FALSE){
# Primer paso ----
## Si hace falta, transformar la fecha en el formato deseado
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
# Segundo paso ----
## Ordenar los datos de más antiguo a más reciente
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
rm(indices)
}
# Tercer paso ----
## Determinar si incluimos todos los segmentos en el cálculo o no
if(include.all == T){
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
} else {
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + i] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[i + 1] - col.variable[i]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
}
}
long.curve <- function(col.variable,
col.time,
convert.toDate = FALSE,
format.date,
time.measure,
include.all = FALSE,
cal.GVI = FALSE){
# Primer paso ----
## Si hace falta, transformar la fecha en el formato deseado
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
# Segundo paso ----
## Ordenar los datos de más antiguo a más reciente
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
rm(indices)
}
# Tercer paso ----
## Determinar si incluimos todos los segmentos en el cálculo o no
if(include.all == T){
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
} else {
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + i] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[i + 1] - col.variable[i]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
}
}
names(x)
head(x)
x%>%
group_by(depth_level)%>%
summarise(lcd = long.curve(col.variable = temp,
col.time = Fecha,
convert.toDate = T,
format.date = "%Y-%m-%d %H:%M:%S",
time.measure = 30))
long.curve <- function(col.variable,
col.time,
convert.toDate = FALSE,
format.date,
time.measure,
include.all = FALSE,
cal.GVI = FALSE){
# Primer paso ----
## Si hace falta, transformar la fecha en el formato deseado
if(convert.toDate == T){
col.time <- lubridate::as_datetime(col.time,
format = format.date)
}
# Segundo paso ----
## Ordenar los datos de más antiguo a más reciente
if(is.unsorted(col.time)){ # Importante comprobar antes si estan o no ordenados
indices <- order(col.time) # Ordenamos la variable tiempo y almacenamos los índices en un nuevo vector
col.time <- col.time[indices] # Actualizamos la variable tiempo
col.variable <- col.variable[indices] # Ordenamos también la variable de interés, para que mantener el dataset inicial
rm(indices)
}
# Tercer paso ----
## Determinar si incluimos todos los segmentos en el cálculo o no
if(include.all == T){
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.variable <- col.variable[i + 1] - col.variable[i]
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
values[i] <- sqrt(dif.time^2 + dif.variable^2)
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
} else {
values <- c()
indexs <- seq(1, length(col.variable) - 1, 1)
for(i in indexs){
dif.time <- as.numeric(col.time[i + 1] - col.time[i])
if(time.measure == dif.time){
dif.variable <- col.variable[i + 1] - col.variable[i]
values[i] <- sqrt(dif.time^2 + dif.variable^2)
} else {
next
}
}
longitudCurva <- sum(values, na.rm = T)
rm(values, dif.variable, dif.time, i)
if(cal.GVI == T){
dif.variable <- col.variable[length(col.variable)] - col.variable[1]
dif.time <- as.numeric(col.time[length(col.time)] - col.time[1])
value <- sqrt(dif.time^2 + dif.variable^2)
print(longitudCurva/value)
} else {
print(longitudCurva)
}
}
}
x%>%
group_by(depth_level)%>%
summarise(lcd = long.curve(col.variable = temp,
col.time = Fecha,
convert.toDate = T,
format.date = "%Y-%m-%d %H:%M:%S",
time.measure = 30))
x%>%
group_by(depth_level)%>%
summarise(lcd = long.curve(col.variable = temp,
col.time = Fecha,
convert.toDate = T,
format.date = "%Y-%m-%d %H:%M:%S",
time.measure = 30),
cal.GVI = T)
x%>%
group_by(depth_level)%>%
summarise(lcd = long.curve(col.variable = temp,
col.time = Fecha,
convert.toDate = T,
format.date = "%Y-%m-%d %H:%M:%S",
time.measure = 30,
cal.GVI = T)
)
